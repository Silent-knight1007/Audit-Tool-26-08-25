const express = require('express')
const router = express.Router()
const NonConformity = require('../models/NonConformity')

// POST: Create a new NonConformity (with validation)
router.post('/', async (req, res) => {
  const requiredFields = [
    'auditId','ncDescription', 'ncClauseNo', 'ncType', 'dueDate', 'department',
    'responsibleperson', 'responsiblepersonmail', 'nclocation',
    'ncRootCause', 'ncstatus'
  ];

  // Check for missing fields
  const missing = requiredFields.filter(field => !req.body[field]);
  if (missing.length > 0) {
    return res.status(400).json({ error: `Missing required fields: ${missing.join(', ')}` });
  }

  try {
    // Don't send ncId from frontend; it will be generated by the model
    const nc = new NonConformity(req.body);
    await nc.save();
    // Return the generated ncId for display/logging if needed
    res.status(201).json({ message: 'NonConformity saved', ncId: nc.ncId });
  } catch (err) {
    // Handle duplicate ID or validation errors
    console.error('NonConformity save error:', err); // <--- Add this line
    res.status(500).json({ error: 'Error saving NonConformity', details: err.message });
  }
});


// // POST: Create a new NonConformity
// router.post('/api/NonConformity', async (req, res) => {
//   // List all required fields
//   const requiredFields = [
//      'auditId','ncDescription', 'ncClauseNo', 'ncType', 'dueDate', 'department',
//     'responsibleperson', 'responsiblepersonmail', 'nclocation',
//     'ncCorrectiveAction', 'ncPreventiveAction', 'ncRootCause', 'ncstatus'
//   ];

//   // Check for missing fields
//   const missing = requiredFields.filter(field => !req.body[field]);
//   if (missing.length > 0) {
//     return res.status(400).json({ error: `Missing required fields: ${missing.join(', ')}` });
//   }

//   try {
//     // Don't send ncId from frontend; it will be generated by the model
//     const nc = new NonConformity(req.body);
//     await nc.save();
//     // Return the generated ncId for display/logging if needed
//     res.status(201).json({ message: 'NonConformity saved', ncId: nc.ncId });
//   } catch (err) {
//     // Handle duplicate ID or validation errors
//     res.status(500).json({ error: 'Error saving NonConformity', details: err.message });
//   }
// });

// GET all non-conformities

router.get('/', async (req, res) => {
  try {
    const nonConformity = await NonConformity.find();
    res.json(nonConformity);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// DELETE multiple non-conformities
router.delete('/', async (req, res) => {
  const { ids } = req.body;
  try {
    await NonConformity.deleteMany({ _id: { $in: ids } });
    res.status(200).json({ message: 'Deleted successfully' });
  } catch (err) {
      res.status(500).json({ message: 'Error deleting nonconformities', error: err });
  }
});


module.exports = router;
